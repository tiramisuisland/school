#ifndef ELOQUENT_ESP32CAM_VIZ_FACE_STREAM_H
#define ELOQUENT_ESP32CAM_VIZ_FACE_STREAM_H

#include "../camera/Camera.h"
#include "../extra/exception.h"
#include "../extra/esp32/wifi/sta.h"
#include "../extra/esp32/http/server.h"
#include "../face/detection.h"
#include "./mjpeg.h"

using eloq::viz::mjpeg;
using eloq::face::detection;
using eloq::face_t;
using Eloquent::Error::Exception;
using Eloquent::Extra::Esp32::Http::HttpServer;
using Eloquent::Esp32cam::Face::FaceDetection;


namespace Eloquent {
    namespace Esp32cam {
        namespace Viz {
            /**
             * Show face detection result in browser
             */
            class FaceDetectionStream {
                public:
                    Exception exception;
                    HttpServer server;

                    /**
                     * Constructor
                     */
                    FaceDetectionStream() :
                        exception("FaceDetectionStream"),
                        server("FaceDetectionStream") {

                        }

                    /**
                     * Debug self IP address
                     */
                    String address() const {
                        return String("Face Detection stream is available at http://") + wifi.ip();
                    }

                    /**
                     * Start server
                     */
                    Exception& begin() {
                        if (!mjpeg.begin().isOk())
                            return exception.propagate(mjpeg);

                        onIndex();
                        onEventStream();

                        return server.beginInThread(exception);
                    }

                protected:

                    /**
                     * Display main page
                     */
                    void onIndex() {
                        server.onGET("/", [this](WebServer *web) {
                            static const uint8_t index[5264] = {31, 139, 8, 0, 0, 0, 0, 0, 0, 19, 173, 88, 109, 111, 219, 54, 16, 254, 158, 95, 193, 217, 5, 36, 181, 182, 148, 22, 251, 48, 184, 182, 139, 1, 109, 128, 2, 3, 54, 36, 221, 167, 34, 104, 100, 233, 100, 49, 161, 40, 130, 164, 98, 27, 142, 254, 251, 248, 34, 249, 45, 146, 37, 15, 57, 160, 149, 69, 221, 61, 119, 207, 145, 119, 36, 51, 77, 101, 70, 230, 87, 72, 201, 52, 133, 48, 182, 63, 205, 171, 196, 146, 192, 252, 38, 140, 0, 125, 5, 9, 145, 196, 57, 69, 119, 192, 159, 129, 79, 3, 251, 113, 175, 44, 34, 142, 153, 68, 130, 71, 179, 65, 42, 37, 19, 147, 32, 136, 98, 234, 203, 16, 147, 21, 166, 113, 36, 132, 31, 229, 217, 96, 62, 13, 172, 106, 229, 51, 216, 59, 157, 46, 242, 120, 131, 214, 227, 56, 148, 225, 108, 240, 39, 99, 174, 55, 64, 17, 9, 133, 152, 13, 18, 2, 107, 132, 37, 100, 98, 28, 1, 149, 192, 209, 99, 33, 36, 78, 54, 213, 235, 224, 32, 148, 24, 63, 215, 102, 28, 72, 40, 241, 51, 28, 124, 54, 42, 56, 91, 162, 137, 137, 53, 123, 100, 176, 28, 160, 224, 68, 65, 121, 98, 202, 20, 84, 56, 73, 206, 103, 131, 197, 34, 87, 254, 41, 210, 79, 16, 3, 52, 121, 130, 141, 29, 245, 113, 124, 130, 126, 26, 132, 214, 106, 80, 49, 106, 172, 86, 10, 23, 34, 39, 133, 114, 136, 41, 193, 20, 198, 11, 146, 71, 79, 104, 145, 243, 88, 113, 181, 143, 241, 167, 250, 71, 152, 45, 212, 255, 191, 95, 95, 171, 64, 132, 220, 16, 152, 13, 182, 4, 18, 57, 65, 15, 239, 182, 38, 168, 117, 201, 214, 15, 35, 36, 115, 182, 31, 219, 216, 177, 21, 142, 101, 186, 31, 93, 217, 209, 20, 240, 50, 61, 0, 72, 245, 112, 169, 167, 139, 181, 132, 126, 154, 162, 39, 86, 39, 200, 87, 201, 97, 57, 166, 82, 180, 208, 238, 69, 125, 185, 167, 137, 86, 227, 143, 40, 85, 255, 120, 94, 208, 24, 226, 113, 82, 16, 210, 196, 253, 137, 157, 50, 87, 35, 155, 78, 42, 65, 205, 165, 97, 34, 3, 53, 147, 39, 139, 163, 65, 189, 82, 107, 174, 135, 32, 40, 40, 123, 90, 234, 245, 31, 132, 132, 41, 142, 143, 106, 9, 197, 144, 0, 63, 41, 135, 3, 211, 99, 159, 186, 132, 242, 149, 255, 3, 214, 242, 134, 135, 25, 220, 73, 14, 97, 134, 102, 40, 41, 168, 41, 76, 23, 104, 108, 114, 62, 66, 57, 53, 42, 30, 218, 190, 98, 35, 83, 44, 124, 241, 202, 182, 73, 85, 11, 1, 137, 22, 69, 162, 226, 84, 218, 142, 115, 213, 168, 148, 128, 140, 210, 157, 123, 175, 117, 194, 125, 153, 2, 117, 57, 8, 52, 155, 183, 248, 171, 37, 202, 169, 144, 72, 69, 25, 27, 207, 202, 198, 215, 189, 193, 95, 130, 188, 53, 131, 110, 187, 155, 189, 125, 12, 81, 110, 1, 40, 172, 144, 78, 221, 87, 59, 210, 203, 154, 67, 101, 120, 11, 203, 111, 107, 230, 58, 254, 251, 47, 195, 225, 221, 223, 55, 195, 161, 235, 127, 248, 226, 13, 135, 223, 236, 239, 247, 158, 51, 66, 142, 112, 188, 230, 244, 212, 98, 217, 248, 250, 225, 122, 54, 23, 117, 254, 17, 43, 50, 230, 110, 227, 156, 194, 8, 61, 135, 164, 128, 178, 109, 70, 14, 5, 39, 200, 213, 54, 231, 217, 236, 253, 203, 130, 211, 207, 231, 131, 212, 82, 77, 248, 135, 89, 157, 64, 223, 62, 93, 19, 153, 10, 61, 87, 139, 15, 211, 165, 219, 65, 88, 75, 16, 152, 20, 234, 142, 142, 116, 109, 163, 68, 23, 112, 47, 102, 28, 124, 9, 66, 186, 54, 28, 175, 79, 66, 180, 232, 37, 251, 243, 215, 8, 37, 186, 4, 70, 122, 233, 200, 123, 179, 132, 124, 88, 67, 84, 163, 117, 71, 174, 69, 242, 77, 79, 175, 117, 208, 198, 171, 175, 210, 147, 169, 57, 38, 64, 151, 50, 69, 115, 116, 221, 111, 134, 106, 169, 234, 247, 8, 172, 31, 66, 137, 162, 80, 21, 35, 114, 117, 241, 151, 253, 72, 238, 234, 91, 167, 170, 211, 162, 7, 168, 154, 115, 14, 81, 193, 5, 116, 170, 218, 53, 217, 84, 26, 186, 34, 188, 207, 103, 1, 202, 246, 156, 180, 124, 42, 175, 154, 223, 46, 235, 193, 234, 96, 210, 213, 59, 43, 94, 205, 107, 199, 156, 56, 212, 222, 164, 79, 73, 234, 144, 244, 110, 91, 225, 170, 93, 47, 212, 136, 126, 154, 11, 89, 78, 254, 248, 24, 60, 140, 26, 1, 236, 25, 100, 130, 126, 222, 143, 154, 103, 3, 83, 44, 91, 123, 186, 22, 221, 225, 114, 2, 202, 229, 210, 117, 190, 43, 237, 115, 205, 203, 182, 195, 221, 166, 81, 247, 210, 131, 109, 200, 117, 2, 120, 86, 199, 48, 225, 84, 117, 215, 221, 225, 205, 70, 100, 137, 232, 100, 106, 163, 206, 213, 226, 11, 70, 20, 49, 231, 197, 233, 174, 6, 63, 11, 153, 107, 58, 78, 103, 40, 199, 60, 89, 168, 98, 17, 21, 207, 127, 111, 255, 186, 131, 144, 71, 233, 63, 102, 212, 0, 246, 236, 29, 186, 27, 88, 44, 189, 107, 185, 14, 112, 158, 115, 167, 103, 29, 107, 169, 214, 80, 61, 85, 198, 190, 25, 241, 130, 246, 127, 73, 59, 139, 39, 232, 208, 29, 142, 29, 15, 189, 188, 160, 235, 230, 69, 217, 36, 235, 99, 132, 245, 197, 0, 155, 99, 128, 205, 197, 0, 171, 99, 128, 213, 197, 0, 233, 49, 64, 122, 49, 192, 238, 40, 172, 234, 245, 162, 93, 64, 203, 246, 36, 131, 4, 126, 237, 146, 120, 154, 28, 245, 173, 206, 79, 217, 63, 188, 54, 79, 252, 140, 39, 254, 166, 158, 72, 118, 134, 83, 246, 166, 156, 206, 120, 226, 111, 234, 137, 30, 56, 58, 245, 68, 255, 175, 163, 251, 139, 180, 253, 4, 19, 117, 47, 118, 213, 173, 76, 117, 64, 125, 47, 66, 191, 205, 208, 181, 118, 172, 175, 68, 230, 229, 178, 99, 137, 105, 169, 22, 206, 173, 8, 11, 248, 78, 165, 171, 193, 189, 58, 163, 187, 161, 141, 87, 246, 61, 181, 116, 159, 58, 122, 52, 252, 138, 175, 185, 168, 171, 16, 237, 221, 86, 209, 60, 203, 179, 60, 211, 61, 237, 142, 87, 221, 150, 90, 174, 12, 175, 67, 239, 119, 198, 152, 6, 250, 62, 51, 191, 154, 6, 230, 207, 47, 255, 1, 168, 34, 35, 70, 133, 17, 0, 0};
                            server.sendGzip(index, 5264);
                        });
                    }

                    /**
                     * Send face recognitions
                     */
                    void onEventStream() {
                        server.onStream("/events", [this](WebServer *web, WiFiClient *client) {
                            if (!detection.run().isOk()) {
                                delay(100);
                                client->print("error=");
                                client->print(detection.exception.toString());
                                return;
                            }

                            if (detection.notFound()) 
                                return;

                            detection.forEach([client](int i, face_t face) {
                                ESP_LOGI(
                                    "FACE", 
                                    "id=%d,x=%d,y=%d,w=%d,h=%d",
                                    i, 
                                    face.x, 
                                    face.y, 
                                    face.width, 
                                    face.height
                                );

                                client->print("id=");
                                client->print(i);
                                client->print("&x=");
                                client->print(face.x);
                                client->print("&y=");
                                client->print(face.y);
                                client->print("&w=");
                                client->print(face.width);
                                client->print("&h=");
                                client->print(face.height);

                                if (face.hasKeypoints()) {
                                    client->print("&le_x=");
                                    client->print(face.leftEye.x);
                                    client->print("&le_y=");
                                    client->print(face.leftEye.y);
                                    client->print("&re_x=");
                                    client->print(face.rightEye.x);
                                    client->print("&re_y=");
                                    client->print(face.rightEye.y);
                                    client->print("&n_x=");
                                    client->print(face.nose.x);
                                    client->print("&n_y=");
                                    client->print(face.nose.y);
                                    client->print("&lm_x=");
                                    client->print(face.leftMouth.x);
                                    client->print("&lm_y=");
                                    client->print(face.leftMouth.y);
                                    client->print("&rm_x=");
                                    client->print(face.rightMouth.x);
                                    client->print("&rm_y=");
                                    client->print(face.rightMouth.y);
                                }

                                client->print("|");
                            });
                        }, 8000);
                    }
            };
        }
    }
}

namespace eloq {
    namespace viz {
        static Eloquent::Esp32cam::Viz::FaceDetectionStream faceStream;
    }
}

#endif